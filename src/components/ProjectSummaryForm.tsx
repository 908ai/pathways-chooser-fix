import { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { useToast } from '@/hooks/use-toast';
import { supabase } from '@/integrations/supabase/client';
import { useAuth } from '@/hooks/useAuth';
import { Save, FileText, AlertTriangle, Info, Upload, X, Download, File } from 'lucide-react';
import FileManager from '@/components/FileManager';

interface ProjectSummaryData {
  projectName: string;
  buildingType: string;
  location: string;
  floorArea: number;
  selectedPathway: 'prescriptive' | 'performance';
  
  // Building Envelope
  atticRsi: number;
  atticPoints: number;
  wallRsi: number;
  wallPoints: number;
  belowGradeRsi: number;
  belowGradePoints: number;
  floorRsi: number;
  floorPoints: number;
  windowUValue: number;
  windowPoints: number;
  
  // Mechanical Systems
  heatingSystemType: string;
  heatingEfficiency: number;
  heatingMakeModel?: string;
  heatingPoints: number;
  coolingSystemType: string;
  coolingEfficiency: number;
  coolingPoints: number;
  waterHeatingType: string;
  waterHeatingEfficiency: number;
  waterHeatingPoints: number;
  hrvErvType: string;
  hrvErvEfficiency: number;
  hrvErvPoints: number;
  
  // Building Performance
  airtightnessAl: number;
  airtightnessPoints: number;
  buildingVolume: number;
  volumePoints: number;
  
  // Performance Path Specific
  annualEnergyConsumption?: number;
  performanceComplianceResult?: string;
  
  // Compliance Results
  totalPoints: number;
  complianceStatus: 'pass' | 'fail' | 'submitted';
  upgradeCosts: number;
  
  // Calculator specific fields
  city?: string;
  province?: string;
  buildingAddress?: string;
  uploadedFiles?: any[];
}

interface CalculatorData {
  city?: string;
  province?: string;
  buildingAddress?: string;
  frontDoorOrientation?: string;
  energuidePathway?: string;
  [key: string]: any;
}

interface ProjectSummaryFormProps {
  calculatorData?: CalculatorData;
  onSave?: () => void;
  editingProjectId?: string;
  autoSave?: boolean;
}

const ProjectSummaryForm = ({ calculatorData, onSave, editingProjectId, autoSave = false }: ProjectSummaryFormProps) => {
  const { user } = useAuth();
  const { toast } = useToast();
  const navigate = useNavigate();
  const [loading, setLoading] = useState(false);
  
  // Function to format location from calculator data
  const getFormattedLocation = () => {
    if (calculatorData?.buildingAddress) {
      return calculatorData.buildingAddress;
    }
    
    // If we have province data from calculator, format it nicely
    if (calculatorData?.province) {
      const province = calculatorData.province;
      const city = calculatorData.city || '';
      
      if (city && province) {
        return `${city}, ${province.charAt(0).toUpperCase() + province.slice(1)}`;
      } else if (province) {
        return province.charAt(0).toUpperCase() + province.slice(1);
      }
    }
    
    return '';
  };
  
  // Function to auto-generate project name
  const getAutoGeneratedProjectName = () => {
    const address = calculatorData?.buildingAddress || getFormattedLocation();
    const company = calculatorData?.company;
    const lastName = calculatorData?.lastName;
    
    if (address && company) {
      return `${address} - ${company}`;
    } else if (address && lastName) {
      return `${address} - ${lastName}`;
    } else if (company) {
      return `Project - ${company}`;
    } else if (lastName) {
      return `Project - ${lastName}`;
    }
    
    return 'New NBC Project';
  };
  
  // Function to get pathway display name
  const getPathwayDisplayName = () => {
    const pathwayMap = {
      '9365': 'NBC 9.36.5 Performance Path',
      '9362': 'NBC 9.36.2 Prescriptive Path', 
      '9367': 'NBC 9.36.7 Tiered Performance Path',
      '9368': 'NBC 9.36.8 Tiered Prescriptive Path'
    };
    
    const selectedPath = calculatorData?.compliancePath;
    if (selectedPath && pathwayMap[selectedPath as keyof typeof pathwayMap]) {
      return `${pathwayMap[selectedPath as keyof typeof pathwayMap]} Summary`;
    }
    
    // Fallback based on selected pathway if compliance path not available
    if (formData.selectedPathway === 'performance') {
      return 'NBC 9.36 Performance Path Summary';
    } else if (formData.selectedPathway === 'prescriptive') {
      return 'NBC 9.36 Prescriptive Path Summary';
    }
    
    return 'NBC 9.36 Pathway Summary';
  };
  
  const [formData, setFormData] = useState<Partial<ProjectSummaryData>>({
    projectName: getAutoGeneratedProjectName(),
    buildingType: calculatorData?.buildingType || '',
    location: getFormattedLocation(),
    floorArea: 0,
    selectedPathway: 'prescriptive',
    // Fix #5 & #6: Ensure uploaded files are properly initialized and captured from calculator
    uploadedFiles: calculatorData?.uploadedFiles || [],
    // Filter out "0" string values and empty values from calculator data
    ...Object.fromEntries(
      Object.entries(calculatorData || {}).filter(([key, value]) => {
        // Keep non-zero numbers, non-empty strings, and other truthy values
        // But exclude string "0" values that should be empty
        if (typeof value === 'string' && value === '0') {
          // Keep "0" for specific fields that should default to 0
          const fieldsToKeepZero = ['floorArea', 'totalPoints'];
          return fieldsToKeepZero.includes(key);
        }
        return value !== '' && value !== null && value !== undefined;
      })
    )
  });

  useEffect(() => {
    if (autoSave) {
      handleSave();
    }
  }, [autoSave]);

  // Debug logging
  console.log('ProjectSummaryForm calculatorData:', calculatorData);
  console.log('ProjectSummaryForm envelope values:', {
    ceilingsAtticRSI: calculatorData?.ceilingsAtticRSI,
    wallRSI: calculatorData?.wallRSI,
    floorsUnheatedRSI: calculatorData?.floorsUnheatedRSI,
    belowGradeRSI: calculatorData?.belowGradeRSI,
    windowUValue: calculatorData?.windowUValue
  });

  const handleInputChange = (field: keyof ProjectSummaryData, value: any) => {
    console.log('DEBUG: ProjectSummaryForm - handleInputChange called:', { field, value });
    if (field === 'uploadedFiles') {
      console.log('DEBUG: ProjectSummaryForm - Updating uploaded files:', value);
    }
    setFormData(prev => ({ ...prev, [field]: value }));
  };

  const handleSave = async () => {
    if (!user) {
      toast({
        title: "Authentication Required",
        description: "Please sign in to save project summaries.",
        variant: "destructive"
      });
      return;
    }

    if (!formData.projectName) {
      toast({
        title: "Project Name Required",
        description: "Please enter a project name before saving.",
        variant: "destructive"
      });
      return;
    }

    setLoading(true);
    
    try {
      // First, check if user has company information and if it needs updating
      const { data: existingCompanies, error: companyError } = await supabase
        .from('companies')
        .select('*')
        .eq('user_id', user.id);

      if (companyError) throw companyError;
      
      // Check if we should create or update company info
      const shouldUpdateCompany = existingCompanies.length === 0 || 
        (calculatorData?.company || calculatorData?.firstName || calculatorData?.lastName || calculatorData?.phoneNumber);
      
      if (shouldUpdateCompany && (calculatorData?.company || calculatorData?.firstName || calculatorData?.lastName)) {
        const companyName = calculatorData?.company || 
                           (calculatorData?.firstName && calculatorData?.lastName ? 
                            `${calculatorData.firstName} ${calculatorData.lastName}` : 
                            existingCompanies[0]?.company_name || 'My Company');
        
        const contactEmail = user.email || calculatorData?.email || existingCompanies[0]?.contact_email;
        const phone = calculatorData?.phoneNumber || existingCompanies[0]?.phone;
        const address = calculatorData?.buildingAddress || formData.location || existingCompanies[0]?.address;

        if (existingCompanies.length === 0) {
          // Create new company record
          const { error: insertError } = await supabase
            .from('companies')
            .insert({
              user_id: user.id,
              company_name: companyName,
              contact_email: contactEmail,
              phone: phone,
              address: address
            });

          if (insertError) throw insertError;

          console.log('Company information auto-imported from first project');
          toast({
            title: "Account Info Created",
            description: "Your account information has been auto-imported from this project.",
          });
        } else {
          // Update existing company record with new information
          const updateData: any = {};
          if (calculatorData?.company && calculatorData.company !== existingCompanies[0]?.company_name) {
            updateData.company_name = companyName;
          }
          if (calculatorData?.phoneNumber && calculatorData.phoneNumber !== existingCompanies[0]?.phone) {
            updateData.phone = phone;
          }
          if ((calculatorData?.buildingAddress || formData.location) && 
              (calculatorData?.buildingAddress || formData.location) !== existingCompanies[0]?.address) {
            updateData.address = address;
          }

          // Only update if there's new information
          if (Object.keys(updateData).length > 0) {
            const { error: updateError } = await supabase
              .from('companies')
              .update(updateData)
              .eq('user_id', user.id);

            if (updateError) throw updateError;

            console.log('Company information updated from project submission');
            toast({
              title: "Account Info Updated",
              description: "Your account information has been updated with details from this project.",
            });
          }
        }
      }

      // Handle file uploads to Supabase Storage and ensure file URLs are captured
      console.log('Processing uploaded files...', calculatorData?.uploadedFiles);
      let uploadedFileData: any[] = [];

      if (calculatorData?.uploadedFiles && calculatorData.uploadedFiles.length > 0) {
        console.log('Processing files from calculator:', calculatorData.uploadedFiles);
        
        // All files from the calculator should already have their path and URL
        uploadedFileData = calculatorData.uploadedFiles.map(file => ({
          name: file.name,
          size: file.size,
          type: file.type,
          path: file.path,
          url: file.url,
          uploaded_at: new Date().toISOString()
        }));
        
        console.log('All files processed successfully:', uploadedFileData);
        console.log('uploadedFileData length:', uploadedFileData.length);
        console.log('uploadedFileData structure:', JSON.stringify(uploadedFileData, null, 2));
      }

      // Now save the project
      const isEditing = !!editingProjectId;
      const baseProjectData = {
        project_name: formData.projectName,
        building_type: formData.buildingType,
        location: formData.location,
        floor_area: parseFloat(String(formData.floorArea)) || null,
        selected_pathway: formData.selectedPathway,
        
        // Building Envelope
        attic_rsi: parseFloat(String(formData.atticRsi)) || null,
        attic_points: parseFloat(String(formData.atticPoints)) || null,
        wall_rsi: parseFloat(String(formData.wallRsi)) || null,
        wall_points: parseFloat(String(formData.wallPoints)) || null,
        below_grade_rsi: parseFloat(String(formData.belowGradeRsi)) || null,
        below_grade_points: parseFloat(String(formData.belowGradePoints)) || null,
        floor_rsi: parseFloat(String(formData.floorRsi)) || null,
        floor_points: parseFloat(String(formData.floorPoints)) || null,
        window_u_value: parseFloat(String(formData.windowUValue)) || null,
        window_points: parseFloat(String(formData.windowPoints)) || null,
        
        // Mechanical Systems
        heating_system_type: formData.heatingSystemType,
        heating_efficiency: parseFloat(String(formData.heatingEfficiency)) || null,
        heating_points: parseFloat(String(formData.heatingPoints)) || null,
        cooling_system_type: formData.coolingSystemType,
        cooling_efficiency: parseFloat(String(formData.coolingEfficiency)) || null,
        cooling_points: parseFloat(String(formData.coolingPoints)) || null,
        water_heating_type: formData.waterHeatingType,
        water_heating_efficiency: parseFloat(String(formData.waterHeatingEfficiency)) || null,
        water_heating_points: parseFloat(String(formData.waterHeatingPoints)) || null,
        hrv_erv_type: formData.hrvErvType,
        hrv_erv_efficiency: parseFloat(String(formData.hrvErvEfficiency)) || null,
        hrv_erv_points: parseFloat(String(formData.hrvErvPoints)) || null,
        
        // Building Performance
        airtightness_al: parseFloat(String(formData.airtightnessAl)) || null,
        airtightness_points: parseFloat(String(formData.airtightnessPoints)) || null,
        building_volume: parseFloat(String(formData.buildingVolume)) || null,
        volume_points: parseFloat(String(formData.volumePoints)) || null,
        
        // Performance Path
        annual_energy_consumption: parseFloat(String(formData.annualEnergyConsumption)) || null,
        performance_compliance_result: formData.performanceComplianceResult,
        
        // Compliance Results
        total_points: parseFloat(String(formData.totalPoints)) || null,
        compliance_status: formData.complianceStatus,
        upgrade_costs: parseFloat(String(formData.upgradeCosts)) || null,
        
        // Uploaded files metadata
        uploaded_files: uploadedFileData
      };

      if (isEditing) {
        const { data, error } = await supabase
          .from('project_summaries')
          .update(baseProjectData)
          .eq('id', editingProjectId)
          .select();
        if (error) throw error;
        console.log('Project updated:', data);
      } else {
        const insertData = { ...baseProjectData, user_id: user.id, id: calculatorData?.projectId };
        const { data, error } = await supabase
          .from('project_summaries')
          .insert(insertData)
          .select();
        if (error) throw error;
        console.log('Project created:', data);
        if (autoSave) {
          navigate('/dashboard');
        } else if (data && data[0]) {
          navigate(`/project/${data[0].id}`);
        } else {
          navigate('/dashboard');
        }
      }

      console.log('Save successful!');
      
      if (editingProjectId) {
        toast({
          title: "Project Updated",
          description: "Your project has been updated successfully.",
        });
        navigate('/dashboard');
      } else if (!autoSave) {
        toast({
          title: "Project Saved",
          description: "Your project summary has been saved successfully.",
        });
      }

      onSave?.();

    } catch (error) {
      console.error('Error saving project summary:', error);
      console.error('Error details:', {
        message: error instanceof Error ? error.message : 'Unknown error',
        stack: error instanceof Error ? error.stack : undefined,
        formData: formData,
        editingProjectId: editingProjectId,
        userId: user?.id
      });
      toast({
        title: "Save Failed",
        description: `There was an error saving your project summary. Error: ${error instanceof Error ? error.message : 'Unknown error'}`,
        variant: "destructive"
      });
    } finally {
      setLoading(false);
    }
  };

  const isPerformancePath = formData.selectedPathway === 'performance';

  return (
    <Card className="w-full max-w-4xl mx-auto">
      <CardHeader>
        <CardTitle className="flex items-center gap-2">
          <FileText className="h-5 w-5" />
          {getPathwayDisplayName()}
        </CardTitle>
      </CardHeader>
      <CardContent className="space-y-6">
        {/* Core Project Information */}
        <div className="space-y-4">
          <div className="space-y-2">
            <Label htmlFor="projectName">Project Name *</Label>
            <Input
              id="projectName"
              value={formData.projectName || ''}
              onChange={(e) => handleInputChange('projectName', e.target.value)}
              placeholder="Enter project name"
            />
          </div>
          
          {/* Project Information Card */}
          <Card>
            <CardHeader>
              <CardTitle className="text-lg">Project Information</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div className="space-y-3">
                  <div className="flex justify-between">
                    <span className="text-sm text-muted-foreground">Applicant Name:</span>
                    <span className="font-medium">
                      {calculatorData?.firstName && calculatorData?.lastName ? 
                        `${calculatorData.firstName} ${calculatorData.lastName}` : 
                        'Not specified'}
                    </span>
                  </div>
                  
                  <div className="flex justify-between">
                    <span className="text-sm text-muted-foreground">Applicant Phone:</span>
                    <span className="font-medium">
                      {calculatorData?.phoneNumber || 'Not specified'}
                    </span>
                  </div>
                  
                  <div className="flex justify-between">
                    <span className="text-sm text-muted-foreground">Company Name:</span>
                    <span className="font-medium">
                      {calculatorData?.company || 'Not specified'}
                    </span>
                  </div>
                  
                  <div className="flex justify-between">
                    <span className="text-sm text-muted-foreground">Building Address:</span>
                    <span className="font-medium">
                      {calculatorData?.buildingAddress || formData.location || 'Not specified'}
                    </span>
                  </div>
                  
                  <div className="flex justify-between">
                    <span className="text-sm text-muted-foreground">Province:</span>
                    <span className="font-medium">
                      {calculatorData?.province ? 
                        calculatorData.province.charAt(0).toUpperCase() + calculatorData.province.slice(1) : 
                        'Not specified'}
                    </span>
                  </div>
                </div>
                
                <div className="space-y-3">
                  <div className="flex justify-between">
                    <span className="text-sm text-muted-foreground">Building Type:</span>
                    <span className="font-medium">
                      {formData.buildingType === 'single-detached' ? 'Single Detached' :
                       formData.buildingType === 'single-family' ? 'Single Family Home' :
                       formData.buildingType === 'duplex' ? 'Duplex' :
                       formData.buildingType === 'row-house' ? 'Row House' :
                       formData.buildingType === 'apartment' ? 'Apartment Building' :
                       formData.buildingType === 'other' ? 'Other' :
                       formData.buildingType || 'Not specified'}
                    </span>
                  </div>
                  
                  <div className="flex justify-between">
                    <span className="text-sm text-muted-foreground">Occupancy Class:</span>
                    <span className="font-medium">
                      {calculatorData?.occupancyClass || 'Not specified'}
                    </span>
                  </div>
                  
                  <div className="flex justify-between">
                    <span className="text-sm text-muted-foreground">Selected Pathway:</span>
                    <span className="font-medium">
                      {formData.selectedPathway === 'performance' ? 'Performance Path' : 'Prescriptive Path'}
                    </span>
                  </div>
                   
                   {formData.selectedPathway === 'performance' && (
                    <div className="flex justify-between">
                      <span className="text-sm text-muted-foreground">Front Door Orientation:</span>
                      <span className="font-medium">
                        {calculatorData?.frontDoorOrientation || 'Not specified'}
                      </span>
                    </div>
                   )}
                  
                   
                   <div className="flex justify-between">
                     <span className="text-sm text-muted-foreground">Building Plans Status:</span>
                     <div className="text-right">
                       <span className="font-medium">
                         {calculatorData?.uploadedFiles && calculatorData.uploadedFiles.length > 0 ? 
                           `${calculatorData.uploadedFiles.length} file(s) uploaded` : 
                           'No files uploaded yet'}
                       </span>
                       {(!calculatorData?.uploadedFiles || calculatorData.uploadedFiles.length === 0) && (
                         <div className="text-xs text-orange-600 mt-1">
                           Building plans upload pending
                         </div>
                       )}
                     </div>
                   </div>
                   
                   {/* Uploaded Files List */}
                   {calculatorData?.uploadedFiles && calculatorData.uploadedFiles.length > 0 && (
                     <div className="mt-4 space-y-4">
                       {/* Building Plans Section */}
                       <div className="space-y-2">
                         <span className="text-sm font-medium text-muted-foreground">Building Plans:</span>
                         <div className="space-y-2">
                           {calculatorData.uploadedFiles
                             .filter((file: any) => !file.name?.toLowerCase().includes('window') && !file.name?.toLowerCase().includes('door'))
                             .map((file: any, index: number) => (
                             <div key={`building-${index}`} className="flex items-center gap-2 p-2 bg-muted/30 rounded-md">
                               <FileText className="h-4 w-4 text-muted-foreground" />
                               <div className="flex-1 min-w-0">
                                 <div className="text-sm font-medium truncate">
                                   {file.name || `Building Plan ${index + 1}`}
                                 </div>
                                 <div className="text-xs text-muted-foreground">
                                   {file.size ? `${(file.size / 1024 / 1024).toFixed(2)} MB` : 'Size unknown'} • 
                                   {file.type || 'Unknown type'}
                                 </div>
                               </div>
                             </div>
                           ))}
                         </div>
                       </div>

                       {/* Window Package Section */}
                       {calculatorData.uploadedFiles.some((file: any) => 
                         file.name?.toLowerCase().includes('window') || file.name?.toLowerCase().includes('door')
                       ) && (
                         <div className="space-y-2">
                           <span className="text-sm font-medium text-muted-foreground">Window/Door Packages:</span>
                           <div className="space-y-2">
                             {calculatorData.uploadedFiles
                               .filter((file: any) => file.name?.toLowerCase().includes('window') || file.name?.toLowerCase().includes('door'))
                               .map((file: any, index: number) => (
                               <div key={`window-${index}`} className="flex items-center gap-2 p-2 bg-blue-50/50 border border-blue-100 rounded-md">
                                 <FileText className="h-4 w-4 text-blue-600" />
                                 <div className="flex-1 min-w-0">
                                   <div className="text-sm font-medium truncate text-blue-900">
                                     {file.name || `Window Package ${index + 1}`}
                                   </div>
                                   <div className="text-xs text-blue-600">
                                     {file.size ? `${(file.size / 1024 / 1024).toFixed(2)} MB` : 'Size unknown'} • 
                                     {file.type || 'Unknown type'}
                                   </div>
                                 </div>
                               </div>
                             ))}
                           </div>
                         </div>
                       )}

                       {/* All other documents */}
                       {calculatorData.uploadedFiles.some((file: any) => 
                         !file.name?.toLowerCase().includes('window') && 
                         !file.name?.toLowerCase().includes('door') &&
                         file.name // Only show files that have names and don't fall into other categories
                       ) === false && calculatorData.uploadedFiles.length > 0 && (
                         <div className="space-y-2">
                           <span className="text-sm font-medium text-muted-foreground">Other Documents:</span>
                           <div className="space-y-2">
                             {calculatorData.uploadedFiles.map((file: any, index: number) => (
                               <div key={`other-${index}`} className="flex items-center gap-2 p-2 bg-muted/30 rounded-md">
                                 <FileText className="h-4 w-4 text-muted-foreground" />
                                 <div className="flex-1 min-w-0">
                                   <div className="text-sm font-medium truncate">
                                     {file.name || `Document ${index + 1}`}
                                   </div>
                                   <div className="text-xs text-muted-foreground">
                                     {file.size ? `${(file.size / 1024 / 1024).toFixed(2)} MB` : 'Size unknown'} • 
                                     {file.type || 'Unknown type'}
                                   </div>
                                 </div>
                               </div>
                             ))}
                           </div>
                         </div>
                       )}
                     </div>
                   )}
                </div>
              </div>
            </CardContent>
          </Card>

          {/* In-Progress Items Summary */}
          {formData.complianceStatus === 'submitted' && (
            <Card className="border-orange-200 bg-orange-50/50">
              <CardHeader>
                <CardTitle className="text-orange-800 flex items-center gap-2">
                  <AlertTriangle className="h-5 w-5" />
                  Project Status - Items Pending
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-4">
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  {/* Documentation Status */}
                  <div className="space-y-2">
                    <h4 className="font-medium text-orange-800">Documentation</h4>
                    <div className="space-y-1 text-sm">
                      {(() => {
                        const allFiles = [...(formData.uploadedFiles || []), ...(calculatorData?.uploadedFiles || [])];
                        return allFiles.length === 0 && (
                          <div className="flex items-center gap-2 text-orange-600">
                            <FileText className="h-4 w-4" />
                            Building plans upload pending
                          </div>
                        );
                      })()}
                      {(() => {
                        const allFiles = [...(formData.uploadedFiles || []), ...(calculatorData?.uploadedFiles || [])];
                        console.log('Checking for window/door files in:', allFiles);
                        console.log('File names:', allFiles.map(f => f.name || 'NO NAME'));
                        console.log('Calculator uploadedFiles:', calculatorData?.uploadedFiles);
                        console.log('Form uploadedFiles:', formData.uploadedFiles);
                        
                        const hasWindowDoorSchedule = allFiles.some((file: any) => {
                          if (!file || !file.name) {
                            console.log('File missing name property:', file);
                            return false;
                          }
                          const fileName = file.name.toLowerCase();
                          const hasKeywords = fileName.includes('window') || 
                                            fileName.includes('door') ||
                                            fileName.includes('stc') ||
                                            fileName.includes('schedule') ||
                                            fileName.includes('supplier') ||
                                            fileName.includes('spec') ||
                                            // Check for common image/document extensions which might be schedules
                                            (fileName.includes('.pdf') || fileName.includes('.jpg') || fileName.includes('.png') || fileName.includes('.jpeg'));
                          console.log(`File "${file.name}": hasKeywords=${hasKeywords}`);
                          return hasKeywords;
                        });
                        
                        console.log('hasWindowDoorSchedule:', hasWindowDoorSchedule);
                        
                        return !hasWindowDoorSchedule && (
                          <div className="flex items-center gap-2 text-orange-600">
                            <FileText className="h-4 w-4" />
                            Window/door schedule upload pending
                          </div>
                        );
                      })()}
                    </div>
                  </div>

                  {/* Technical Specifications */}
                  <div className="space-y-2">
                    <h4 className="font-medium text-orange-800">Technical Specifications</h4>
                    <div className="space-y-1 text-sm">
                      {(!calculatorData?.heatingMakeModel || calculatorData.heatingMakeModel === '') && (
                        <div className="flex items-center gap-2 text-orange-600">
                          <Info className="h-4 w-4" />
                          Heating system make/model pending
                        </div>
                      )}
                      {(!calculatorData?.coolingMakeModel || calculatorData.coolingMakeModel === '') && (
                        <div className="flex items-center gap-2 text-orange-600">
                          <Info className="h-4 w-4" />
                          Cooling system make/model pending
                        </div>
                      )}
                      {(!calculatorData?.waterHeatingMakeModel || calculatorData.waterHeatingMakeModel === '') && (
                        <div className="flex items-center gap-2 text-orange-600">
                          <Info className="h-4 w-4" />
                          Water heater make/model pending
                        </div>
                      )}
                      {calculatorData?.hasHrvErv9365 === 'yes' && (!calculatorData?.hrvMakeModel || calculatorData.hrvMakeModel === '' || calculatorData.hrvMakeModel === '0') && (
                        <div className="flex items-center gap-2 text-orange-600">
                          <Info className="h-4 w-4" />
                          HRV/ERV make/model pending
                        </div>
                      )}
                    </div>
                  </div>

                  {/* Missing Information */}
                  <div className="space-y-2">
                    <h4 className="font-medium text-orange-800">Missing Information</h4>
                    <div className="space-y-1 text-sm">
                      {(!calculatorData?.province || calculatorData.province === '') && (
                        <div className="flex items-center gap-2 text-orange-600">
                          <Info className="h-4 w-4" />
                          Province/location details needed
                        </div>
                      )}
                      {(!calculatorData?.frontDoorOrientation || calculatorData.frontDoorOrientation === '') && (
                        <div className="flex items-center gap-2 text-orange-600">
                          <Info className="h-4 w-4" />
                          Front door orientation needed
                        </div>
                      )}
                      {formData.floorArea === 0 && (
                        <div className="flex items-center gap-2 text-orange-600">
                          <Info className="h-4 w-4" />
                          Floor area calculation needed
                        </div>
                      )}
                    </div>
                  </div>

                  {/* Certifications & Services */}
                  <div className="space-y-2">
                    <h4 className="font-medium text-orange-800">Optional Services</h4>
                    <div className="space-y-1 text-sm">
                      {(!calculatorData?.interestedCertifications || calculatorData.interestedCertifications.length === 0) && (
                        <div className="flex items-center gap-2 text-orange-500">
                          <Info className="h-4 w-4" />
                          Certification preferences not specified
                        </div>
                      )}
                      {!calculatorData?.midConstructionBlowerDoorPlanned && (
                        <div className="flex items-center gap-2 text-orange-500">
                          <Info className="h-4 w-4" />
                          Mid-construction testing preference not set
                        </div>
                      )}
                    </div>
                  </div>
                </div>

                <div className="mt-4 p-3 bg-orange-100 rounded-md">
                  <p className="text-sm text-orange-800">
                    <strong>Next Steps:</strong> Complete the missing items above to move your project forward. 
                    Upload required documents and provide technical specifications to finalize your submission.
                  </p>
                </div>
              </CardContent>
            </Card>
          )}
        </div>

        {/* Detailed Building Specifications */}
        {formData.totalPoints !== undefined && (
          <div className="space-y-6">
            {/* Compliance Summary */}
            <Card className="bg-muted/50">
              <CardContent className="pt-6">
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4 text-center">
                  <div>
                    <div className="text-2xl font-bold text-orange-600">TBD</div>
                    <div className="text-sm text-muted-foreground">Compliance Status</div>
                  </div>
                  <div>
                    <div className="text-2xl font-bold text-primary">${formData.upgradeCosts?.toLocaleString() || 0}</div>
                    <div className="text-sm text-muted-foreground">Upgrade Costs</div>
                  </div>
                </div>
                <div className="mt-4 p-3 bg-blue-50 border border-blue-200 rounded-md">
                  <p className="text-sm text-blue-800">
                    <strong>Review Timeline:</strong> A review will take place within 1-2 days.
                  </p>
                </div>
                {calculatorData?.energuidePathway === 'yes' && (
                  <div className="mt-4 p-3 bg-orange-50 border border-orange-200 rounded-md">
                    <p className="text-sm text-orange-800">
                      <strong>EnerGuide Rating System (ERS) Notice:</strong> Performance modelling would be required for the ERS pathway. Please contact us for more details regarding this additional service.
                    </p>
                  </div>
                )}
              </CardContent>
            </Card>

            {/* Building Envelope Specifications */}
            <Card>
              <CardHeader>
                <CardTitle className="text-lg">Building Envelope Specifications</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                   <div className="space-y-3">
                      {(calculatorData?.ceilingsAtticRSI || formData.atticRsi) && (
                         <div className="flex justify-between">
                           <span className="text-sm text-muted-foreground">Attic/Ceiling (RSI):</span>
                          <span className="font-medium">
                            {calculatorData?.ceilingsAtticRSI || formData.atticRsi}
                          </span>
                        </div>
                     )}
                     {(calculatorData?.wallRSI || formData.wallRsi) && (
                        <div className="flex justify-between">
                          <span className="text-sm text-muted-foreground">Wall (RSI):</span>
                          <span className="font-medium">
                            {calculatorData?.wallRSI || formData.wallRsi}
                          </span>
                        </div>
                     )}
                     {(calculatorData?.belowGradeRSI || formData.belowGradeRsi) && (
                        <div className="flex justify-between">
                          <span className="text-sm text-muted-foreground">Below Grade Walls (RSI):</span>
                          <span className="font-medium">
                            {calculatorData?.belowGradeRSI || formData.belowGradeRsi}
                          </span>
                        </div>
                     )}
                       {calculatorData?.floorsSlabsSelected?.includes("slabOnGradeIntegralFooting") && (
                         <div className="flex justify-between">
                           <span className="text-sm text-muted-foreground">Slab on Grade Integral Footing (RSI):</span>
                           <span className="font-medium">
                             {calculatorData?.slabOnGradeIntegralFootingRSI || 'Not specified'}
                           </span>
                         </div>
                       )}
                     {calculatorData?.hasCathedralOrFlatRoof === 'yes' && calculatorData?.cathedralFlatRSI && (
                       <div className="flex justify-between">
                         <span className="text-sm text-muted-foreground">Cathedral/Flat Roof:</span>
                         <span className="font-medium">
                           {calculatorData?.cathedralFlatRSI}
                         </span>
                       </div>
                     )}
                     {formData.airtightnessAl && (
                        <div className="flex justify-between">
                          <span className="text-sm text-muted-foreground">Airtightness (ACH50):</span>
                          <span className="font-medium">
                            {formData.airtightnessAl || calculatorData?.airtightness}
                          </span>
                        </div>
                     )}
                     {calculatorData?.midConstructionBlowerDoorPlanned && (
                       <div className="flex justify-between">
                         <span className="text-sm text-muted-foreground">Mid-Construction Test:</span>
                         <span className="font-medium text-green-600">
                           Planned - Early testing for quality assurance
                         </span>
                       </div>
                     )}
                      <div className="flex justify-between">
                        <span className="text-sm text-muted-foreground">Blower Door Test Required:</span>
                        <span className="font-medium">
                          {(() => {
                            const airtightnessValue = parseFloat(formData.airtightnessAl || calculatorData?.airtightness || "0");
                            const province = calculatorData?.province;
                            const minimumThreshold = province === "saskatchewan" ? 3.2 : 3.0;
                            
                            return airtightnessValue > 0 && airtightnessValue < minimumThreshold ? "Yes" : "No";
                          })()}
                        </span>
                      </div>
                   </div>
                   <div className="space-y-3">
                      {(calculatorData?.floorsUnheatedRSI || calculatorData?.floorsOverUnheatedSpacesRSI) && (
                        <div className="flex justify-between">
                          <span className="text-sm text-muted-foreground">Floors Over Unheated Spaces:</span>
                          <span className="font-medium">
                            {calculatorData?.floorsUnheatedRSI || calculatorData?.floorsOverUnheatedSpacesRSI}
                          </span>
                        </div>
                      )}
                      {calculatorData?.floorsGarageRSI && (
                        <div className="flex justify-between">
                          <span className="text-sm text-muted-foreground">Garage Floors:</span>
                          <span className="font-medium">
                            {calculatorData?.floorsGarageRSI}
                          </span>
                        </div>
                      )}
                      {(calculatorData?.hasInFloorHeat9365 === 'yes' || calculatorData?.hasInFloorHeat9365 === 'no' || calculatorData?.heatedFloorsRSI) && (
                        <div className="flex justify-between">
                          <span className="text-sm text-muted-foreground">Heated Floors:</span>
                          <div className="text-right">
                            <span className="font-medium">
                              {calculatorData?.hasInFloorHeat9365 === 'yes' ? 
                                (calculatorData?.heatedFloorsRSI || 'To be specified') : 
                                calculatorData?.hasInFloorHeat9365 === 'no' ? 'Not installing' : 
                                calculatorData?.heatedFloorsRSI}
                            </span>
                            {calculatorData?.hasInFloorHeat9365 === 'yes' && !calculatorData?.heatedFloorsRSI && (
                              <div className="text-xs text-orange-600 mt-1">
                                Insulation specifications needed
                              </div>
                            )}
                          </div>
                        </div>
                       )}
                     <div className="flex justify-between">
                       <span className="text-sm text-muted-foreground">Window U-Value:</span>
                       <div className="text-right">
                         <span className="font-medium">TBD</span>
                         {(!calculatorData?.windowUValue || calculatorData?.windowUValue === '') && (
                           <div className="text-xs text-orange-600 mt-1">
                             Waiting for window specifications file upload
                           </div>
                         )}
                         {!isPerformancePath && formData.windowPoints && (
                           <div className="text-xs text-muted-foreground">({formData.windowPoints} pts)</div>
                         )}
                       </div>
                     </div>
                      {calculatorData?.skylightUValue && (
                        <div className="flex justify-between">
                          <span className="text-sm text-muted-foreground">Skylight U-Value:</span>
                          <span className="font-medium">
                            {calculatorData?.skylightUValue}
                          </span>
                        </div>
                      )}
                    </div>
                 </div>
              </CardContent>
            </Card>

            {/* Mechanical Systems */}
            <Card>
              <CardHeader>
                <CardTitle className="text-lg">Mechanical Systems</CardTitle>
              </CardHeader>
              <CardContent>
                 <div className="space-y-3">
                    {formData.heatingSystemType && (
                       <div className="grid grid-cols-2 gap-4">
                         <span className="text-sm text-muted-foreground">Heating System:</span>
                         <span className="font-medium text-right">
                            {formData.heatingSystemType}
                         </span>
                       </div>
                    )}
                      {calculatorData?.compliancePath === '9367' ? (
                        (calculatorData?.heatingMakeModel || calculatorData?.heatingEfficiency) && (
                          <div className="grid grid-cols-2 gap-4">
                            <span className="text-sm text-muted-foreground">Heating System Make/Model:</span>
                            <span className="font-medium text-right">{calculatorData.heatingMakeModel || calculatorData.heatingEfficiency}</span>
                          </div>
                        )
                      ) : (
                        (calculatorData?.heatingEfficiency || formData.heatingEfficiency) && (
                          <div className="grid grid-cols-2 gap-4">
                            <span className="text-sm text-muted-foreground">Heating Efficiency:</span>
                            <span className="font-medium text-right">{calculatorData?.heatingEfficiency || formData.heatingEfficiency}</span>
                          </div>
                        )
                      )}
                     {(formData.heatingSystemType === 'Boiler' || formData.heatingSystemType === 'boiler' || calculatorData?.heatingType === 'boiler') && calculatorData?.indirectTank === 'yes' && (
                       <div className="grid grid-cols-2 gap-4">
                         <span className="text-sm text-muted-foreground">Indirect Tank:</span>
                         <span className="font-medium text-right">
                           Yes{calculatorData?.indirectTankSize ? ` - ${calculatorData.indirectTankSize} gallons` : ''}
                         </span>
                       </div>
                     )}
                     {formData.coolingSystemType && formData.coolingSystemType !== 'None' && (
                        <div className="grid grid-cols-2 gap-4">
                          <span className="text-sm text-muted-foreground">Cooling System:</span>
                          <span className="font-medium text-right">
                            {formData.coolingSystemType}
                          </span>
                        </div>
                     )}
                     {(calculatorData?.coolingApplicable === 'yes' || calculatorData?.coolingMakeModel) && (
                       <div className="grid grid-cols-2 gap-4">
                         <span className="text-sm text-muted-foreground">Cooling System Make/Model:</span>
                         <span className="font-medium text-right">{calculatorData?.coolingMakeModel || 'To be specified'}</span>
                       </div>
                     )}
                      {formData.waterHeatingType && (
                        <div className="grid grid-cols-2 gap-4">
                          <span className="text-sm text-muted-foreground">Water Heating:</span>
                          <span className="font-medium text-right">
                             {formData.waterHeatingType}
                          </span>
                        </div>
                       )}
                       {calculatorData?.compliancePath === '9367' && (calculatorData?.waterHeatingMakeModel || calculatorData?.waterHeater) && (
                        <div className="grid grid-cols-2 gap-4">
                          <span className="text-sm text-muted-foreground">Water Heating Make/Model:</span>
                          <span className="font-medium text-right">
                             {calculatorData.waterHeatingMakeModel || calculatorData.waterHeater}
                          </span>
                        </div>
                       )}
                      {calculatorData?.hasDWHR && (
                        <div className="grid grid-cols-2 gap-4">
                          <span className="text-sm text-muted-foreground">Drain Water Heat Recovery:</span>
                          <span className="font-medium text-right">
                            {calculatorData?.hasDWHR === 'yes' ? 'Yes - DWHR system being installed' : 
                             calculatorData?.hasDWHR === 'no' ? 'No' : 'Not specified'}
                          </span>
                        </div>
                      )}
                     {(calculatorData?.hasHrvErv9365 === 'yes' || calculatorData?.hasHrvErv9365 === 'no') && (
                       <div className="grid grid-cols-2 gap-4">
                         <span className="text-sm text-muted-foreground">HRV/ERV:</span>
                         <span className="font-medium text-right">
                           {calculatorData?.hasHrvErv9365 === 'yes' ? 'Yes' : 'No'}
                         </span>
                       </div>
                     )}
                      {(calculatorData?.hasHrvErv9365 === 'yes' || calculatorData?.hrvMakeModel || calculatorData?.hrvEfficiency) && (
                        <div className="grid grid-cols-2 gap-4">
                          <span className="text-sm text-muted-foreground">HRV/ERV Make/Model:</span>
                          <span className="font-medium text-right">{calculatorData?.hrvMakeModel || calculatorData?.hrvEfficiency || 'To be specified'}</span>
                        </div>
                      )}
                      {formData.hrvErvEfficiency && formData.hrvErvEfficiency > 0 && calculatorData?.compliancePath !== '9367' && (
                        <div className="grid grid-cols-2 gap-4">
                          <span className="text-sm text-muted-foreground">HRV/ERV Efficiency:</span>
                          <span className="font-medium text-right">{formData.hrvErvEfficiency}%</span>
                        </div>
                      )}
                     {(calculatorData?.hasSecondaryHrv === 'yes' || calculatorData?.secondaryHrvEfficiency) && (
                       <div className="grid grid-cols-2 gap-4">
                         <span className="text-sm text-muted-foreground">Secondary Suite HRV/ERV:</span>
                         <span className="font-medium text-right">
                           {calculatorData?.hasSecondaryHrv === 'yes' ? 
                             (calculatorData?.secondaryHrvEfficiency ? 
                               `Yes - ${calculatorData.secondaryHrvEfficiency}% efficiency` : 
                               'Yes - Efficiency TBD') : 
                             'No'}
                         </span>
                       </div>
                     )}
                     {(calculatorData?.hasSecondaryHeating === 'yes' || calculatorData?.secondaryHeatingType || calculatorData?.secondaryHeatingEfficiency) && (
                       <div className="grid grid-cols-2 gap-4">
                         <span className="text-sm text-muted-foreground">Secondary Suite Heating:</span>
                         <span className="font-medium text-right">
                           {calculatorData?.hasSecondaryHeating === 'yes' ? 
                             (calculatorData?.secondaryHeatingType ? 
                               `${calculatorData.secondaryHeatingType}${calculatorData?.secondaryHeatingEfficiency ? ` - ${calculatorData.secondaryHeatingEfficiency}% efficiency` : ''}` : 
                               'Yes - Type TBD') : 
                             calculatorData?.secondaryHeatingType ?
                               `${calculatorData.secondaryHeatingType}${calculatorData?.secondaryHeatingEfficiency ? ` - ${calculatorData.secondaryHeatingEfficiency}% efficiency` : ''}` :
                               'Not specified'}
                         </span>
                       </div>
                     )}
                     {(calculatorData?.hasSecondaryWaterHeater === 'yes' || calculatorData?.secondaryWaterHeaterType) && (
                       <div className="grid grid-cols-2 gap-4">
                         <span className="text-sm text-muted-foreground">Secondary Suite Water Heating:</span>
                         <span className="font-medium text-right">
                           {calculatorData?.hasSecondaryWaterHeater === 'yes' ? 
                             (calculatorData?.secondaryWaterHeaterSameAsMain === 'yes' ? 
                               'Same as main suite' :
                               calculatorData?.secondaryWaterHeaterType ? 
                                 calculatorData.secondaryWaterHeaterType : 
                                 'Yes - Type TBD') : 
                             'No'}
                         </span>
                       </div>
                     )}
                 </div>
               </CardContent>
             </Card>

            {/* Building Performance */}
            <Card>
              <CardHeader>
                <CardTitle className="text-lg">Building Performance</CardTitle>
              </CardHeader>
               <CardContent>
                 {formData.selectedPathway === 'performance' && (
                   <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                     <div className="space-y-3">
                       <div className="flex justify-between">
                         <span className="text-sm text-muted-foreground">Performance Result:</span>
                         <span className="font-medium">{formData.performanceComplianceResult || 'TBD'}</span>
                       </div>
                       {formData.annualEnergyConsumption && (
                         <div className="flex justify-between">
                           <span className="text-sm text-muted-foreground">Annual Energy:</span>
                           <span className="font-medium">{formData.annualEnergyConsumption} kWh</span>
                         </div>
                       )}
                     </div>
                   </div>
                 )}
                 {formData.selectedPathway !== 'performance' && (
                   <div className="text-center text-muted-foreground py-4">
                     Additional building performance metrics can be calculated during energy modeling if the performance path is chosen.
                   </div>
                 )}
               </CardContent>
            </Card>
          </div>
         )}

        {/* Additional Information Section */}
        <Card>
          <CardHeader>
            <CardTitle className="text-lg">Additional Information</CardTitle>
          </CardHeader>
          <CardContent className="space-y-4">
            {calculatorData?.additionalInfo && (
              <div className="space-y-2">
                <h4 className="font-medium text-sm">Additional Comments:</h4>
                <div className="p-3 bg-muted border border-border rounded-md">
                  <p className="text-sm text-foreground whitespace-pre-wrap">
                    {calculatorData.additionalInfo}
                  </p>
                </div>
              </div>
            )}
            
            <div className="space-y-3">
              <div className="flex justify-between">
                <span className="text-sm text-muted-foreground">EnerGuide ERS Pathway Considered:</span>
                <span className="font-medium">
                  {calculatorData?.energuidePathway === 'yes' ? 'Yes' : 
                   calculatorData?.energuidePathway === 'no' ? 'No' : 
                   'Not specified'}
                </span>
              </div>
              
              {calculatorData?.interestedCertifications && calculatorData.interestedCertifications.length > 0 && (
                <div className="space-y-2">
                   <span className="text-sm text-muted-foreground">Certifications/Programs Considered:</span>
                  <div className="space-y-1">
                    {calculatorData.interestedCertifications.map((certId: string, index: number) => {
                      const certNames: { [key: string]: string } = {
                        'energuide': 'EnerGuide Certification',
                        'energy-star': 'ENERGY STAR Certification',
                        'built-green': 'Built Green Certification',
                        'net-zero': 'Net Zero Home Certification',
                        'leed': 'LEED Certification',
                        'passive-house': 'Passive House Certification'
                      };
                      return (
                        <div key={index} className="text-sm font-medium ml-4">
                          • {certNames[certId] || certId}
                        </div>
                      );
                    })}
                  </div>
                </div>
              )}
              
              {(!calculatorData?.interestedCertifications || calculatorData.interestedCertifications.length === 0) && (
                <div className="flex justify-between">
                  <span className="text-sm text-muted-foreground">Certifications/Programs Considered:</span>
                  <span className="font-medium">None specified</span>
                </div>
              )}
            </div>
          </CardContent>
        </Card>

        {/* File Upload Section */}
        <FileManager
          files={formData.uploadedFiles || []}
          onFilesChange={(files) => handleInputChange('uploadedFiles', files)}
          readOnly={false}
          showUpload={true}
        />

        {/* Action Buttons */}
        <div className="flex justify-start gap-3">
          <Button
            onClick={handleSave}
            disabled={loading || !formData.projectName}
            className="min-w-[120px]"
          >
            {loading ? (
              <div className="animate-spin h-4 w-4 border-2 border-current border-t-transparent rounded-full" />
            ) : (
              <>
                <Save className="h-4 w-4 mr-2" />
                Save Project
              </>
            )}
          </Button>
        </div>
      </CardContent>
    </Card>
  );
};

export default ProjectSummaryForm;