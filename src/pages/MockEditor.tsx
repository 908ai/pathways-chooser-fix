import React, { useEffect, useState } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Textarea } from '@/components/ui/textarea';
import { 
  Code, 
  Eye, 
  Save, 
  Play, 
  Square,
  FileText,
  Settings,
  Download,
  Upload
 } from 'lucide-react';
import starryMountainsBg from '@/assets/vibrant-starry-mountains-bg.jpg';

// Mock editor page that simulates the Lovable editor interface
const MockEditor: React.FC = () => {
  const [mode, setMode] = useState<'preview' | 'edit'>('preview');
  const [code, setCode] = useState(`// Welcome to the AI Code Editor
// This is a simulation of the Lovable editor interface

import React from 'react';
import { Card, CardContent } from '@/components/ui/card';

const AIGeneratedComponent = () => {
  return (
    <Card className="w-full max-w-md mx-auto">
      <CardContent className="p-6">
        <h2 className="text-2xl font-bold mb-4">AI Generated Code</h2>
        <p className="text-gray-200 drop-shadow-sm">
          This component was generated by AI based on your project requirements.
        </p>
        <div className="mt-4 space-y-2">
          <div className="p-3 bg-blue-50 rounded-md">
            <strong>Project Type:</strong> NBC 9.36 Compliance
          </div>
          <div className="p-3 bg-green-50 rounded-md">
            <strong>Status:</strong> Ready for Review
          </div>
        </div>
      </CardContent>
    </Card>
  );
};

export default AIGeneratedComponent;`);
  const [isRunning, setIsRunning] = useState(false);

  // Listen for messages from parent window
  useEffect(() => {
    const handleMessage = (event: MessageEvent) => {
      console.log('Mock Editor: Received message', event.data);
      
      const { type, mode: newMode, code: newCode } = event.data;
      
      switch (type) {
        case 'init_editor':
          console.log('Mock Editor: Initializing with mode:', newMode);
          if (newMode) setMode(newMode);
          if (newCode) setCode(newCode);
          break;
          
        case 'mode_change':
          console.log('Mock Editor: Mode change to:', newMode);
          setMode(newMode);
          break;
          
        case 'load_code':
          console.log('Mock Editor: Loading code:', newCode);
          if (newCode) setCode(newCode);
          break;
      }
    };

    window.addEventListener('message', handleMessage);
    
    // Send ready signal to parent
    setTimeout(() => {
      if (window.parent !== window) {
        window.parent.postMessage({
          type: 'editor_ready',
          timestamp: Date.now()
        }, '*');
      }
    }, 1000);

    return () => {
      window.removeEventListener('message', handleMessage);
    };
  }, []);

  const handleSave = () => {
    // Send save request to parent
    if (window.parent !== window) {
      window.parent.postMessage({
        type: 'save_request',
        code: code,
        timestamp: Date.now()
      }, '*');
    }
  };

  const handleCodeChange = (newCode: string) => {
    setCode(newCode);
    
    // Notify parent of code changes
    if (window.parent !== window) {
      window.parent.postMessage({
        type: 'code_change',
        code: newCode,
        timestamp: Date.now()
      }, '*');
    }
  };

  const handleRun = () => {
    setIsRunning(true);
    
    // Simulate code execution
    setTimeout(() => {
      setIsRunning(false);
      
      // Send preview update to parent
      if (window.parent !== window) {
        window.parent.postMessage({
          type: 'preview_update',
          timestamp: Date.now()
        }, '*');
      }
    }, 2000);
  };

  return (
    <div className="h-screen text-white overflow-hidden relative" style={{ backgroundImage: `url(${starryMountainsBg})`, backgroundSize: 'cover', backgroundPosition: 'center', backgroundRepeat: 'no-repeat' }}>
      <div className="absolute inset-0 bg-slate-900/90 backdrop-blur-sm"></div>
      {/* Mock Editor Header */}
      <div className="h-12 bg-slate-800/90 backdrop-blur-sm border-b border-slate-700 flex items-center px-4 relative z-10">
        <div className="flex items-center gap-2">
          <div className="w-3 h-3 bg-red-500 rounded-full"></div>
          <div className="w-3 h-3 bg-yellow-500 rounded-full"></div>
          <div className="w-3 h-3 bg-green-500 rounded-full"></div>
        </div>
        
        <div className="flex-1 flex items-center justify-center">
          <span className="text-sm font-medium">AI Code Editor - Lovable</span>
        </div>
        
        <div className="flex items-center gap-2">
          <Badge variant={mode === 'preview' ? 'default' : 'secondary'}>
            {mode === 'preview' ? 'Preview' : 'Edit'}
          </Badge>
          <Button
            size="sm"
            variant="ghost"
            onClick={() => setMode(mode === 'preview' ? 'edit' : 'preview')}
            className="text-white hover:bg-slate-700"
          >
            {mode === 'preview' ? <Code className="h-4 w-4" /> : <Eye className="h-4 w-4" />}
            {mode === 'preview' ? 'Edit' : 'Preview'}
          </Button>
        </div>
      </div>

      {/* Main Content Area */}
      <div className="h-[calc(100vh-48px)] flex relative z-10">
        {/* Sidebar */}
        <div className="w-64 bg-slate-800/90 backdrop-blur-sm border-r border-slate-700 p-4">
          <div className="space-y-4">
            <div>
              <h3 className="text-sm font-semibold mb-2 text-slate-300">Project Files</h3>
              <div className="space-y-1">
                <div className="flex items-center gap-2 p-2 hover:bg-slate-700 rounded cursor-pointer">
                  <FileText className="h-4 w-4 text-slate-400" />
                  <span className="text-sm">AIComponent.tsx</span>
                </div>
                <div className="flex items-center gap-2 p-2 hover:bg-slate-700 rounded cursor-pointer">
                  <FileText className="h-4 w-4 text-slate-400" />
                  <span className="text-sm">index.ts</span>
                </div>
                <div className="flex items-center gap-2 p-2 hover:bg-slate-700 rounded cursor-pointer">
                  <Settings className="h-4 w-4 text-slate-400" />
                  <span className="text-sm">config.json</span>
                </div>
              </div>
            </div>
            
            <div>
              <h3 className="text-sm font-semibold mb-2 text-slate-300">AI Tools</h3>
              <div className="space-y-1">
                <Button size="sm" variant="ghost" className="w-full justify-start text-slate-300 hover:bg-slate-700">
                  <Download className="h-4 w-4 mr-2" />
                  Generate Code
                </Button>
                <Button size="sm" variant="ghost" className="w-full justify-start text-slate-300 hover:bg-slate-700">
                  <Upload className="h-4 w-4 mr-2" />
                  Analyze Code
                </Button>
              </div>
            </div>
          </div>
        </div>

        {/* Editor/Preview Area */}
        <div className="flex-1 flex flex-col">
          {/* Toolbar */}
          <div className="h-12 bg-slate-800/90 backdrop-blur-sm border-b border-slate-700 flex items-center px-4 gap-2">
            <Button
              size="sm"
              onClick={handleSave}
              className="bg-blue-600 hover:bg-blue-700"
            >
              <Save className="h-4 w-4 mr-2" />
              Save
            </Button>
            
            <Button
              size="sm"
              variant="outline"
              onClick={handleRun}
              disabled={isRunning}
              className="border-slate-600 text-slate-300 hover:bg-slate-700"
            >
              {isRunning ? <Square className="h-4 w-4 mr-2" /> : <Play className="h-4 w-4 mr-2" />}
              {isRunning ? 'Running...' : 'Run'}
            </Button>
            
            <div className="ml-auto flex items-center gap-2">
              <span className="text-xs text-slate-400">
                {mode === 'edit' ? 'Editing' : 'Previewing'} â€¢ Auto-save enabled
              </span>
            </div>
          </div>

          {/* Main Content */}
          <div className="flex-1 p-4">
            {mode === 'edit' ? (
              <div className="h-full">
                <Textarea
                  value={code}
                  onChange={(e) => handleCodeChange(e.target.value)}
                  className="h-full resize-none bg-slate-900 border-slate-700 text-green-400 font-mono text-sm"
                  placeholder="Write your code here..."
                />
              </div>
            ) : (
              <div className="h-full bg-white rounded-lg p-6 overflow-auto">
                <Card className="w-full max-w-md mx-auto">
                  <CardHeader>
                    <CardTitle className="flex items-center gap-2 text-slate-900">
                      <Code className="h-5 w-5" />
                      AI Generated Preview
                    </CardTitle>
                  </CardHeader>
                  <CardContent>
                    <div className="space-y-4 text-slate-700">
                      <p>This is a live preview of your AI-generated code.</p>
                      
                      <div className="p-4 bg-blue-50 rounded-lg">
                        <h4 className="font-semibold text-blue-900 mb-2">Project Integration</h4>
                        <p className="text-sm text-blue-800">
                          Your code is automatically integrated with the NBC 9.36 compliance system.
                        </p>
                      </div>
                      
                      <div className="p-4 bg-green-50 rounded-lg">
                        <h4 className="font-semibold text-green-900 mb-2">Real-time Updates</h4>
                        <p className="text-sm text-green-800">
                          Changes are synchronized with the parent application in real-time.
                        </p>
                      </div>
                      
                      {isRunning && (
                        <div className="p-4 bg-yellow-50 rounded-lg border border-yellow-200">
                          <div className="flex items-center gap-2">
                            <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-yellow-600"></div>
                            <span className="text-sm font-medium text-yellow-800">
                              Running code analysis...
                            </span>
                          </div>
                        </div>
                      )}
                    </div>
                  </CardContent>
                </Card>
              </div>
            )}
          </div>
        </div>
      </div>
    </div>
  );
};

export default MockEditor;